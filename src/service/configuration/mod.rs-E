use envconfig::Envconfig;
use integrationos_domain::{
    database::DatabaseConfig, environment::Environment, secrets::SecretsConfig,
};
use std::collections::HashMap;
use std::fmt::Debug;

#[derive(Clone, Envconfig)]
pub struct RefreshConfig {
    #[envconfig(from = "REFRESH_BEFORE_IN_MINUTES", default = "10")]
    refresh_before: i64,
    #[envconfig(from = "SLEEP_TIMER_IN_SECONDS", default = "20")]
    sleep_timer: u64,
    #[envconfig(nested = true)]
    database: DatabaseConfig,
    #[envconfig(nested = true)]
    secrets_config: SecretsConfig,
    #[envconfig(from = "TIMEOUT", default = "30")]
    timeout: u64,
    #[envconfig(from = "ENVIRONMENT", default = "test")]
    environment: Environment,
}

impl Debug for RefreshConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("OAuthConfig")
            .field("refresh_before", &self.refresh_before)
            .field("sleep_timer", &self.sleep_timer)
            .field("timeout", &self.timeout)
            .field("environment", &self.environment)
            .finish()
    }
}

impl RefreshConfig {
    pub fn refresh_before(&self) -> i64 {
        self.refresh_before
    }

    pub fn sleep_timer(&self) -> u64 {
        self.sleep_timer
    }

    pub fn database(&self) -> &DatabaseConfig {
        &self.database
    }

    pub fn secrets_config(&self) -> &SecretsConfig {
        &self.secrets_config
    }

    pub fn timeout(&self) -> u64 {
        self.timeout
    }

    pub fn environment(&self) -> Environment {
        self.environment
    }
}

impl From<HashMap<&str, &str>> for RefreshConfig {
    fn from(value: HashMap<&str, &str>) -> Self {
        let refresh_before = value
            .get("REFRESH_BEFORE_IN_MINUTES")
            .and_then(|value| value.parse().ok())
            .unwrap_or(10);

        let sleep_timer = value
            .get("SLEEP_TIMER_IN_SECONDS")
            .and_then(|value| value.parse().ok())
            .unwrap_or(20);

        let owned = value
            .iter()
            .map(|(k, v)| (k.to_string(), v.to_string()))
            .collect();
        let database = DatabaseConfig::init_from_hashmap(&owned).unwrap_or_default();
        let secrets_config = SecretsConfig::init_from_hashmap(&owned).unwrap_or_default();
        let timeout = value
            .get("TIMEOUT")
            .and_then(|value| value.parse().ok())
            .unwrap_or(30);
        let environment = value
            .get("ENVIRONMENT")
            .unwrap_or(&"test")
            .parse()
            .expect("Failed to parse environment");

        Self {
            refresh_before,
            environment,
            sleep_timer,
            timeout,
            database,
            secrets_config,
        }
    }
}
